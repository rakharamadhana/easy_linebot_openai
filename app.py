from flask import Flask, request, abort
# 引入 Flask 庫中的 Flask、request 和 abort
# Import Flask, request, and abort from the Flask library

from linebot import LineBotApi, WebhookHandler
from linebot.exceptions import InvalidSignatureError
from linebot.models import MessageEvent, TextMessage, TextSendMessage, PostbackEvent, MemberJoinedEvent
# 引入 LineBot API 所需的庫和模組
# Import necessary libraries and modules for LineBot API

import os
import openai
import traceback
# 引入 Python 標準庫和 OpenAI 庫
# Import Python standard libraries and OpenAI library

# 初始化 Flask 應用程式和靜態檔案路徑
# Initialize Flask app and static file path
app = Flask(__name__)
static_tmp_path = os.path.join(os.path.dirname(__file__), 'static', 'tmp')

# 使用環境變數初始化 Line Bot API 和 Webhook 處理程序
# Initialize Line Bot API and Webhook Handler with environment variables
line_bot_api = LineBotApi(os.getenv('CHANNEL_ACCESS_TOKEN'))
handler = WebhookHandler(os.getenv('CHANNEL_SECRET'))

# 從環境變數中獲取 OpenAI 模型名稱
# Fetch the OpenAI model name from the environment variables
openai_model = os.getenv('OPENAI_MODEL', 'gpt-4o-mini')  # 如果沒有設定環境變數，則使用預設模型名稱
# Provide a default if the environment variable isn't set

# Fetch the system content from environment variables, with a fallback default value
system_content = os.getenv('OPENAI_SYSTEM_CONTENT', 'You are a helpful assistant.')

# 設定 OpenAI API 密鑰
# Set OpenAI API key
openai.api_key = os.getenv('OPENAI_API_KEY')

def get_gpt_response(user_text):
    """生成 OpenAI GPT 模型的回應"""
    """Generate a response from OpenAI GPT model."""
    try:
        response = openai.ChatCompletion.create(
            model=openai_model,
            # 指定使用的 GPT 模型
            # Specify the GPT model to use
            messages=[
                {"role": "system", "content": system_content},
                # 系統訊息：設定助手的角色和內容
                # System message: Define the role and content of the assistant
                {"role": "user", "content": user_text},  # 使用者訊息
                # User message
            ],
            temperature=0.5,  # 控制回應的隨機性
            # Control randomness in responses
            max_tokens=500   # 限制生成回應的長度
            # Limit the length of the generated response
        )
        return response['choices'][0]['message']['content']
        # 返回 GPT 生成的回應文本
        # Return the response text generated by GPT
    except Exception as e:
        print("Error with OpenAI API call:", e)
        # 如果 API 調用失敗，則記錄錯誤
        # Log an error if the API call fails
        return "Sorry, I'm unable to provide a response right now."
        # 返回錯誤訊息給使用者
        # Return an error message to the user

@app.route("/callback", methods=['POST'])
def callback():
    """處理來自 LINE 平台的 POST 請求"""
    """Handle POST requests from LINE platform."""
    signature = request.headers['X-Line-Signature']
    # 獲取 X-Line-Signature 標頭的值
    # Get the X-Line-Signature header value
    body = request.get_data(as_text=True)
    # 獲取請求正文作為文本
    # Get the request body as text

    try:
        handler.handle(body, signature)
        # 使用處理程序處理 webhook 正文
        # Handle webhook body using the handler
    except InvalidSignatureError:
        abort(400)
        # 如果簽名無效，則終止並返回 400 錯誤
        # If signature is invalid, abort with 400 error
    
    return 'OK'
    # 返回 'OK' 作為回應
    # Return 'OK' as a response

@handler.add(MessageEvent, message=TextMessage)
def handle_text_message(event):
    """處理來自 LINE 使用者的文字訊息"""
    """Handle text messages from LINE users."""
    user_text = event.message.text
    # 從傳入的訊息中獲取文本
    # Get the text from the incoming message
    response_text = get_gpt_response(user_text)
    # 使用 GPT 生成回應
    # Generate a response using GPT
    line_bot_api.reply_message(event.reply_token, TextSendMessage(response_text))
    # 使用生成的回應回覆使用者
    # Reply to the user with the generated response

@handler.add(PostbackEvent)
def handle_postback(event):
    """處理來自 LINE 使用者的 postback 事件"""
    """Handle postback events from LINE users."""
    print("Received postback data:", event.postback.data)
    # 輸出 postback 資料以便除錯
    # Print postback data for debugging

@handler.add(MemberJoinedEvent)
def handle_member_join(event):
    """歡迎新成員加入群組"""
    """Welcome new members to the group."""
    user_id = event.joined.members[0].user_id
    # 獲取新成員的使用者 ID
    # Get user ID of the new member
    group_id = event.source.group_id
    # 獲取成員加入的群組 ID
    # Get group ID where the member joined
    profile = line_bot_api.get_group_member_profile(group_id, user_id)
    # 獲取新成員的個人資料
    # Get profile of the new member
    welcome_message = f"{profile.display_name}, welcome to the group!"
    # 創建歡迎訊息
    # Create a welcome message
    line_bot_api.reply_message(event.reply_token, TextSendMessage(welcome_message))
    # 向群組發送歡迎訊息
    # Send the welcome message to the group

if __name__ == "__main__":
    # 主程式入口點，啟動 Flask 應用程式
    # Main entry point for the application, start Flask app
    port = int(os.environ.get('PORT', 5000))
    # 設定 Flask 應用程式的運行端口
    # Set the port for the Flask app to run on
    app.run(host='0.0.0.0', port=port)
    # 啟動 Flask 應用程式
    # Start the Flask app
